TO DO for Seq66 0.99.4 (Sequencer64 refactored for C++14 and Qt)
Chris Ahlstrom
2019-04-13 to 2023-05-06

Some of these issues will be pushed off for the distant Seq66v2.

Hot:

    -   Try to eliminate "missing ctrl" message at first startup.
    -   Finish the major upgrade to the event editor; plan for a
        "SeqSpec" tab?  Worth it?
    -   Do we really need sequence::draw_lock() now? Investigate.
    -   Weird port change while testing port mapping: original input
        ports vs second write:

                           v
             0  1   "[0] 0:0 system:ALSA Announce"
             1  1   "[1] 14:0 Midi Through Port-0"
             2  1   "[2] 130:2 VMPK Output:out"
                             ^
                           v
             0  1   "[0] 0:1 system:ALSA Announce"
             1  1   "[1] 14:0 Midi Through Port-0"
             2  1   "[2] 130:0 VMPK Output:out"
                             ^

UI:

    Additional, oft-used configuration items to consider adding to the
    Preferences dialog:

        -   Display:
            -   Global seq feature (global vs pattern background pattern, key,
                and scale).
            -   Tempo / BPM min and max. Might want to add a "Meta" or "Tempo"
                tab to Preferences and move the MIDI Clock meta stuff to it.
                There are BPM options in 'rc' and 'usr'!
        -   Play Options:
            -   New-pattern editor options (check-boxes)
            -   Add song-start-mode radio buttons. Already have Live and Song
                in Preferences / JACK.  Add "Auto" (as default).
        -   Config Options: (new)
            -   Log-file. Add this CLI option to Preferences / Session.

Playlists:

    -   When changing the buss with override, then do a Save-As, the new buss
        is not saved in the file.
    -   Make sure that otherwise changing the buss during playlist processing
        does not raise the save/dirty flag.

Port-Mapping:

    Running qpseq66 on Linux:  "QSynth" is named "PortMidi"! See
    seq_portmidi/src/midibus.cpp.  The workaround is to specify long port
    names in the 'rc' file.

Automation:

    Can we leverage continuous controllers (CC) to support modifying synth
    parameters through input automation? See the new "macro" facility.

From Testing:

    When zooming, try to keep the same viewport in view.  Got this working
    for horizontal seqroll and perfroll, but not for vertical (refactoring
    needed).  Try to center vertically on notes in the viewport.

    Can we distinguish note-insertion from movement snap, to avoid the
    "L"-then-snap-then-move samba?

Windows:

    -   mastermidibase::activate() fails at m_outbus_array.initialize().
        Error initing port 1; it should be disabled?
    -   Change to creating a 64-bit installer and adjust the instructions.
    -   In the live grid, move the top text up 1 pixel.  Move the bottom text
        up 2 pixels. Maybe reduce the font size by 1. Also consist the for the
        piano rolls.
    -   The default Qt theme pushes the seqtime rightward by about 6 pixels.

Pending Macros:

    SEQ66_SHOW_TEMPO_IN_PIANO_ROLL: leave code in place just in case.
    SEQ66_USE_JACK_SYNC_CALLBACK (saved only for reference).
    USE_C_MILLISLEEP (related to high CPU in Windows/portmidi builds).
    USE_SONG_BOX_SELECT (this will require a lot of work to perfect).
    USE_UNICODE_SUPPORT (used only in Cakewalk WRK file support).
    USE_ACTIVE_SENSE_AND_RESET (handled in JACK, but not ALSA or portmidi).
    USE_SEQUENCE_REMOVE_EVENTS (no code uses this function yet).
    USE_ADJUST_DATA_HANDLE (no code uses this function yet).
    USE_INTERSECT_FUNCTIONS (could be used for trigger lookup at some point).
    USE_TIMEBASE_MASTER (functionality from Hydrogen, not used).

Others to Consider:

    On a Debian Sid box, ALSA puts out *two* events into Qsynth for every note
    event. On an Ubuntu box, just one event is emitted. Why?  Try it under JACK
    at some point on Debian Sid (it also puts out two events).  Two events are
    emitted even when just clicking on the virtual piano keyboard in the
    pattern editor!  This occurs during the buss flush after the event is
    sent.  Does not seem to be due to the MIDI thru ALSA port.

Ongoing efforts:

    -   Verify setmapper/setmaster for odd set sizes.
    -   Perfect the "background recording" feature.

ISSUES:

#3  Open loop Pattern Editor window.
    On mouse wheel scroll event we expect the piano-roll and notes sheet to
    scroll vertically.
    STATUS: We had to disable mouse-wheel scrolling for this reason: In
    qseqkeys, we did not want the scroll wheel to accidentally scroll the
    piano keys vertically.  Same for qscrollmaster, qseqeditframe64, except
    that we note wheelEvent() is not called for some reason.  One way around
    this issue might be to somehow pass child scrolling up to the
    qscrollmaster class, e.g. via a signal. For now, we have mitigated
    this issue by enabling the scroll wheel in the pattern and song piano
    rolls, and disabled it in qseqdata, qseqtime, qstriggereditor,
    qperfnames, and qpertime.

#24 Release notes in release tag message?
    STATUS: Will try to create a GitHub release using the "hub" program and
    the RELNOTES (not .md) file.

#37 Song editor scrolling?
    STATUS: Closed, refer to issue #3 instead.

#44 "Record live sequence changes" functionality
    Currently the "record live sequence changes" only adds patterns into the
    song timeline as whole loops, starting at the last pattern loop and ending
    at the next, and ignoring queueing completely (queueing a pattern just
    adds it to the song immediately). It seems to me that a live-oriented
    sequencer like Seq66 should have the ability to record a live performance
    as accurately as possible, so that a user can simply hit the record enable
    and do their live performance, knowing that can then go back and replay it
    exactly (if they want to do a recording session for example, or perform
    the same track while focussing entirely on knob tweaking etc.) The song
    timeline already supports arbitrary start/end points for pattern "chunks",
    so it seems like this should already be possible. Thoughts?
    1. When recording live sequence changes in song mode, turning "snap" mode
    off makes the pattern block start exactly when you press the button on the
    Launchpad, like you expect, but the end point always extends out to the
    next multiple of the pattern length when you mute it again.
    2. With "snap" mode enabled, live sequence changes always snap to pattern
    length  regardless of the snap size setting in the drop-down box. The snap
    size does work when dragging and resizing pattern blocks in the timeline -
    except.
    3. ...off-by-one error in the snap size drop-down. 1/1 and 1/2 are both 1/1,
    1/3 is actually 1/2, 1/4 is actually 1/3 etc.  FIXED.
    STATUS: Partially fixed.  One can now trigger manually
    in the perfnames pane, but there are still issues to resolve.

#46 JACK port groups / order?
    STATUS: Probably a future feature (version 2).

#48 JACK-midi self connections
    With NSM and [manual ports] enabled, inputs ports are not created when I
    load the session.  Steps to reproduce :

      * Create a NSM session with a jack-patch.
      * Add qseq66
      * Save and quit the session
      * Change .rc file in the session folder to enable [manual-ports], then
        save the file.
      * Open your NSM session, use MIDI-input preference to create ports,
        then make connections.
      * Save and reload the session.

    Also, [manual-ports] is off, then seq66 handles connections. IMO, this
    behavior should be disabled with NSM, because a session manager is
    supposed to store/restore the connections.

    (I have used Ray-Session , but I guess it acts as others NSM managers)

    Probably need an option to not auto-connect while NSM is running.
    The current fix is to disable auto-connect when first creating the
    new session configuration.  This can be changed later in the 'rc' file.

    STATUS: Mitigated, should close with release 0.99.4.

#52 Community / discussion place?
    STATUS: Partly supported now by using github.io, but much more to be done.

#63 Option to rotate pattern numbers?
    STATUS: It works for the live grid.
    New issue: Verify that it works in other settings.

#66 Toggle MIDI Recording via CC message
    
    I think modes generally should be triggerable individually. Especially if
    there   will be more to come in the future, it will get messy when you
    only have a single button for them.  I think that a next candidate would
    be for copy and clear mode.  In copy mode, the first grid button press
    would highlight a pattern and the second one would paste it to the
    appropriate slot.  On clear mode, the patterns could be emptied or removed
    via the grid buttons on   the controller.

    We could end up with a lot of modes, perhaps more than keystrokes could
    support.  If a MIDI controller can emit specific D2 data programmably from
    0 to 127 (for Notes, D1 is the note number and D2 is the velocity; for
    Controllers, D1 is the CC number and D2 is the value), then we could
    consolidate modes in one command (and preserve the stepping through the
    modes as an alternative for less flexible controllers).

    Ideally there would be an automation control for cycling through the modes
    and one for each mode separately.  Then people could chose if they want to
    set up a control that cycles through the options or set up a control that
    instantly activates a specific mode.

    STATUS: Partly fulfilled.

#68 MIDI controller initialization step
    STATUS: Closed, some follow-on suggestions:

    Actually I have been thinking about the mode transition logic and it would
    be nice to have support for temporary transition.
    Here is my original suggested flow

    1. Controller button pressed
    2. MIDI CC message with `on value` sent
    3. Seq66 reacts to the message and changes modes
    4. Controller button released
    5. MIDI CC message with `off value` sent
    6. Seq66 does nothing
    7. ...
    8. Same controller button pressed
    9. MIDI CC message with `on value` sent
    10. Seq66 reacts to the message and changes to neutral mode
    11. Controller button released
    12. MIDI CC message with `off value` sent
    13. Seq66 does nothing

    A temporary transition would be engaged by holding a button down on the
    MIDI controller and then releasing it later.  While the button is held
    down, Seq66 switches to the configured mode, the grid buttons can then be
    used to engage with the mode. When the button is released,Seq66 switches
    back to the previous mode and not to the neutral one.  This could be
    implemented via a timer that starts when a CC from a button press is
    released. If the button is released under a threshold amount of time then
    the mode is toggled permamently. If no `button released` CC message is
    received within a threshold amount of time then the transition becomes
    temporary and when the `button released` CC message is finally received
    then Seq66 switches back to the previous mode.

    The idea is that with a MIDI controller you could assign different
    functions to a single button.  It would also fit nicely with a Launchpad
    where apart from the grid buttons, there are "mode" buttons on the side.

#76 MIDI Tempo Sync & Real Time Messages Not Behaving As Expected When SEQ66
    is a MIDI Slave
    STATUS: Some fix(es) made, needs more testing.

#77 For building without JACK
    STATUS: Will push off to version 2

#83 MIDI Input not possible: "[midi-input]: in-bus data line error"
    STATUS: Seems to be fixed. Will spawn another new issue out the
    
    New Issue: "Get control/display ports to work without auto-connect".
    This involves being able to set up the controls after the fact without
    being stymied by start-up errors. An ALSA issue.
    STATUS: Fixed.

#86 The mousewheel doesn't works to scroll or zoom in Editor.
    STATUS: Closed, see issue #3 instead.

#90 seq66 does not recognize some changes for the save entry in the file menu.
    STATUS: Ongoing improvements.
    Fix pattern is DONE, but needs a way to allow user to back out more easily.
    LFO: Reset needs to undo modify, if no modification already in place.

#95 Velocity screen does not fully refresh when scrolling left or right.
    STATUS: Still need to duplicate.

#96 MIDI learn (and wizard) for creating controller maps?
    STATUS: If we do this, it will be a separate application.  A lot of
    potential issues in getting this right.
    STATUS: Will push off to version 2

#97 Investigate/resolve differences from Seq24.
    Seq24: Input from a keyboard when not playing advances like one-shot
    mode, but does not stop when looped back as in Seq66.
    STATUS: Fixed.

#98 Feature requests (metronome and background recording).
    STATUS: Basically done.

#99 How is seq66 different from seq64?
    STATUS: Explained in the issue report.  README.md changes needed?

#100 Seq66's MIDI timing completely falls apart at JACK buffer sizer larger
    than 128.
    STATUS: In progress. Added a timestamp to each message in the JACK
    ringbuffer (enabled by a C macro in libseq66/include/seq_features.h).
    This addes a notable burden on process and we can get buffer overflow
    errors.  Even with message timestamps disabled, the b4uacuse-stress.midi
    file can cause failure, especially when the next set is chosen.
    At minimum we should stop, clear out JACK, and panic. We found that
    there seems to be no way (using methods culled from other apps such as
    Ardour) to completely eliminate hiccups in the synchronization of
    note input and playback, due to the unavoidable lag between putting the
    note in the ringbuffer and taking it out in the JACK process callback.

#101 Totally unstable playback
    Further investigation leads me to believe it might be something with the
    realtime kernel and video drivers! bloody annoying! I wonder where to
    start looking...

#102 How can I use mutes?
    After some additional experimentation I found out that Seq66 has these
    features too with Windows build. However I am not able to to mute patterns
    using computer keyboard no matter what I try to do. I discovered mute tab,
    but I don't understand what's going on here and I am pretty sure that
    plain muting (with queue functionality) is good enough for me.
    Muting using mouse works reasonably well.
    I am using Windows 7 if this helps with platform specific bugs.
    STATUS: Need to improve documentation and testing, including on Windows.

#103 One-shot (repetitions != 0) patterns do not play
    This feature works, but requires the pattern to be armed before
    playback begins, either in Live or Song mode.  Should we make the loop
    auto-arm, or make this an option somehow?

#104 Really confusing usage
    This requires some improvements to the LaTeX documentation and the HTML
    tutorial.  One issue is Pipewire, which is unsupported; the user system
    employs pulseaudio-pw.

#107 Can't increase clip length while transport is running
    Somehow disabled this feature on 2022-08-20, with no note why.

    Tried recording using "Expand", and it failed in a spectacular way.  Lets
    say I have Jack transport running for a while, so that the transport
    indicator says 096:X:xxx. (Had it running up to 800 or so and the same
    happens:

    When arming a pattern for recording using "Expand", the pattern becomes as
    long as the number (96 bars in this case) where I press down the keys on my
    keyboard.  It then loops being 96 bars, until I press down a couple other
    keys, where it again expands to whatever the transport indicates at that
    point (for example 142:X:xxx).

    When no more keys are being pressed, the pattern becomes 142 bars long,
    until I press some more keys.  And it seems to repeat like that until I
    press the Stop button, when it starts over on 001:X:xxx. The pattern length
    remains the same though.

    STATUS: Undoing the change and commenting on it. Investigating the second
            part.
     
PATTERNS:

    -   Set pattern editor focus to grid at start unless it is a new one.
    -   Make it center on notes if not visible.
    -   Consider adding start/stop buttons to external windows (song & pattern).

To close as fixed (and remove from TODO):

    24 Release notes in release tag message?
    47 change key map
    54 Qt5 include errors
    63 Option to rotate pattern numbers?
    64 NSM: UI show up after restarting the app
    68 MIDI controller initialization step
    79 NSM: starts always with a blank pattern
    80 Launchpad MIDI on input bus
    83 MIDI Input not possible: "[midi-input]: in-bus data line error"
    85 Segfaults and extra windows
    89 MIDI control output queue events
    91 No colors in live view with xfce/xubuntu
    93 The window of a deleted pattern remains open
    94 Added Song editor expansion button
    97 Seq24 differences
    98 Metronome and background recording

To close as pushed off to version 2:

     1 JACK Metadata MIDINAM support
    62 PipeWire compatibility
    68 MIDI controller initialization step
    77 For building without JACK
    82 Tabs do not scale to window
    96 MIDI Learn/Wizard as separate (?) app

MIDI version 2 considerations::

    ALSA:

    -   When toggling a virtual input port, another port with the same
        number gets created.  Looks like this bug has been around for awhile.
        It also yields an ALSA unsubscribe error when disabling an input.
    -   Use const char * snd_asoundlib_version () to get the ALSA version.

    JACK:

    -   Pulseaudio gone, so now the USB devices (without a2jmidid running)
        show up as "0:n system:midi_playback_n+1 'Device name'" (similar
        for 'playback') and qsynth as "1:4 qsynth:midi_00". True even if
        short port-naming.

Version 2 features:

    -   Use Meson/Ninja as the build system.
    -   See the issue noted above as "pushed off to version 2".
    -   Port refresh in ALSA and JACK at a minimum.
    -   Live note mapping?
    -   Abletone Link support?
    -   Support for audio-clip patterns?
    -   Add keyboard configuration to MIDI Learn/Wizard.
    -   Move the Events, Playlist, Sets, and Mutes to a separate window
        (the Preferences editor?).
    -   Make main menu hide-able.
    -   Allow multiple instances of seq66.
    -   More consistent support for undo / redo / unmodify.
    -   Add console output for every user action.
    -   Add scripting language?
    -   Clean up kruft in setmapper/screenset.
    -   Support more than one tune?
    -   A way to lay out a pattern from one track into another tracks
        playback, to re-use the pattern on a differnt buss and channel.
    -   Support manual reconnecting, including of the control/display busses.
    -   Implement solo, FF, rewind, etc.
    -   Weak JACK support.  Seq66 dependence on the JACK ringbuffer is an
        issue here.
    -   Use std::numeric_limits instead of macros.
    -   LV2 MIDINAM support.
    -   JACK port groups and order.
    -   Pipewire support.

# vim: sw=4 ts=4 wm=4 et ft=sh
