TO DO for Seq66 0.91.2 (Sequencer64 refactored for C++14 and Qt)
Chris Ahlstrom
2019-04-13 to 2020-11-29

HOT ITEMS:

    From: zigmhount <notifications@github.com>
    Subject: [Question/Feature request] Live midi pattern recording (#188)

        I have followed closely the development of the midi control output to
        use with my Akai APC Mini - awesome. The only think I miss now is to
        easily record a midi pattern in an empty slot without too much
        fiddling with the mouse or keyboard, as in a live setup.

        My ideal feature would be e.g.

        1. when an empty pattern is selected (on the control surface)
        2. to automatically open the pattern editor
        3. automatically activate Dump Data to MIDI Bus
        4. automatically activate Midi pass-through
        5. automatically activate Record Midi data
        6. automatically set Merge to Expand the sequence to fit recording
        7. and manually select the midi output to the synth.

        How easy/difficult would it be to implement keyboard or midi shortcuts
        to these buttons (steps 2 to 6), or preset them for every new pattern
        editor?

    Investigate the test the playlist functionality.

    Windows:

        Disable JACK-related elements for Windows, such as the JACK options.

    When resizing, also recalculate the x and y scaling appropriately.

    The corners and borders of the grid buttons are colored.  A problem?

    Make sure grid button text colors are appropriate.

    In main frame, try to highlight the start/stop/pause buttons
    appropriately.  Also consider showing a small status bar.

    Figure out a way to condense the external qseqedit frame to 800x480.

    Finish off the NSM functionality.

    Backports to Sequencer64:

        -   qseqedit 800x480 feature if successful

    See if direct calls to midifile::write() [and parse()] can be replace by
    the free-function versions defined in midifile.

    Make sure performer::ppqn() and bpm() always consistent with
    get_ppqn() and get_beats_per_minute().

ISSUES:

    #1: JACK Metadata MIDINAM support.  LV2 MIDNAM has been around for a
    while. There has been discussion on #lad, and, now JACK 2 has metadata
    implemented, Carla has started offering that MIDNAM information as
    metadata on the midi-in port for a connecting sequencer to use.
    STATUS: Not yet started.

    #2: Failed to find matching components of a complete QT installation.
    User: Make sure that dev versions of all the Qt libraries mentioned in
    the DEPENDENCIES/ Qt Builds section of the INSTALL file are installed.
    STATUS: Updated the INSTALL documentation.

    #3: Open loop Pattern Editor window.
    On mouse wheel scroll event we expect the piano-roll and notes sheet to
    scroll vertically.  STATUS: We had to disable mouse-wheel scrolling for
    this reason: In qseqkeys, we did not want the scroll wheel to accidentally
    scroll the piano keys vertically.  Same for qscrollmaster,
    qseqeditframe64, except that we note wheelEvent() is not called for some
    reason.

    #7: 'make install' doesn't install files.
    STATUS: This is an Arch packaging issue.  Copied and modified the PKGBUILD
    file from Sequencer64 and tweaked it.  Check it out.

    #8: NSM Support? Similar to ahlstromcj/sequencer64#1 but now there is an
    NSM fork, https://github.com/linuxaudio/new-session-manager.
    STATUS: Basically done.  Users finding bugs to fix.

    #9: Change pattern in the Edit tab while on the Edit tab? I do not think I
    can see anything currently.
    STATUS:  Closed, reopen if necessary.

    #10: Right click-hold on pattern editor doesn't show draw pencil.
    STATUS: Qt does not have a pencil icon, so a pointing finger appears
    instead.  Closed.

    #11: Pattern editor: disabling the 'piano roll scrolls with playback'
    button does not stop the scrolling.
    STATUS: Closed?

    #12: Note rendering problem.
    Having a long note, scrolling it out of vision and back again leads to a
    problem.  (Only the first snap division and last snap division of the note
    appears.  STATUS:  Weird, will do.

    #13: Pattern editor: control event bar does not update/scroll.
    If I add or remove a note, the related representation in the control bar
    below the piano roll does not refresh. Also, if I scroll the view above,
    the control bar stays in the same place.  STATUS:  In progress.  Related
    to issue #9.  Cannot duplicate the issue with the control bar staying in
    the same place.  I found so far that the event (trigger) bar and data
    (control) bar were not showing events due to an error I made in setting
    the status/cc values to show.

#14 Build issue in Linux
    Might be considered RESOLVED.

#15 Crash when closing Set Window
    OS: Manjaro-Linux 5.7.9-1-MANJARO x86_64
    Version: seq66-git 0.90.3.r181.70e9302-1 (master)

    When opening the "Set" window and not closing it with the close button,
    but from the window manager's upper right close button, the program
    crashes.

    Can you post a screenshot of the window you are talking about? I don't see
    a Close button and am not able to figure out what you are looking at.
    Thanks!

    I think it's the "Set Master" window. I get the same crash on master
    compile qseq66. Have title bars disabled here so I'm killing/closing with
    my window manager.

#16 Ableton Live transport support?

    Go to this issue in Github to see the thread.

#17 Connect midi devices by name

    Currently midi devices are mapped by bus number. This is a problem when
    devices are added and removed, which happens a lot for me. Why not storing
    and connecting midi devices by name instead?

    This could even be backwards-compatible: when the configuration file has a
    bus number, use that, if it is a string, connect by name.

    ----

    I think this is a great idea. The way it is done now is from seq24; not
    bad, but yeah, could be improved. I will think about this issue. It will
    be a little while because I am tied up with the "nsm"
    (non-session-manager) branch.

#18 Mute Group does not toggle

    I have configured into the .ctrl file the following in order to toggle the
    first mute group using a midi controller. It send a Control Change message
    (176 decimal or 0xb0 hex) with the CC number 27. When I press the pad 27
    on my midi controller it unmute all the patterns configured in the first
    mute group but when I press the pad one more time it does not mute the
    patterns. I have configured the mute group using the mute group tab and
    include all patterns of the first row.

#19 Closed
#20 Closed
#21 Closed

#22 Arch Linux PKGBUILD file for seq66

    I adapted a script from Christopher Arndt for to build seq66 on Arch Linux
    as a package. Since I'm not a package maintainer I just provide it here,
    so that it may be included in the build/install documentation or maybe an
    already active AUR package maintainer would like to take it and make it it
    "official". ;-)

#23 Problems with Qt during compilation

    See the github issue.

#24 Release notes in release tag message?

    I'd like to add seq66 to https://libreav.org/updates
    Could I request that the release change notes are used in the release
    message? Then they could be syndicated via the releases.atom.
    Either using the release description box in the Create Release feature on
    GitHub (which can accept markdown) or with something like git tag -a v0.4
    -m "$(cat RELNOTES.md)" (which GH doesn't detect markdown from).
    Not sure this is worth doing. Don't know about "atom".

#25 Configure fails. Closed; consider having the install make a softlink
called "seq66".


PATTERNS:

    -   Support a non-channel pattern (e.g. to contain patch info).
    -   Set pattern editor focus to grid at start unless it is a new one.
    -   Make it center on notes if not visible.
    -   Still some weird note events in 2rock, above measure 20, when scrolling
        via the scrollbar; okay when clicking the scrollbar. Fine when scrolling
        during playback.
    -   Make sure Esc/Space work in pattern editor.  Consider adding the
        start/stop buttons.
    -   When loading 2rock pattern 10(1) into the editor, adjust the length
        dropdown to match!

Tons of TO DOs in performer!

    Do:

        -   After importing to a set, reload that set to make changes visible.
        -   In qseqroll, replace reset_draw_marker().
        -   In qsmainwnd, implement and unhide the PPQN combo box, and save the
            setting.
        -   Implement setmapper::select_triggers_in_range().
        -   Implement screenset::select_triggers_in_range().
        -   Investigate sequence::offset_triggers() usage.

    Load a song with Song triggers; go to the song tab; select File/New. Note
    that the perfroll clears, but not the perfnames!  We need to derive all
    qperf GUIs from qperfbase.  Actually, they both clear, only if clicked on.

    When copying a large track and pasting into a smaller one, consider altering
    the length of the smaller track to match.

List of To-Do Items for the Refactoring.  An asterisk means it should also be
fixed in Seq64.

seq_portmidi/src/finddefault.c *:

    Eliminate find_default_device().  We do not want to use Java user preferences
    for configuration information.

seq_portmidi/src/pmwinmm.c *:
seq_portmidi/src/pmmacosxcm.c *:

    Figure out the proper client and port values for calls to pm_add_device().

seq_portmidi/src/mastermidibus.cpp *:

    Implement api_set_ppqn().
    Implement api_set_beats_per_minute().
    Declare and Implement api_flush().
    Declare and Implement api_start().
    Declare and Implement api_stop().
    Declare and Implement api_continue_from().
    Declare and Implement api_port_start().

seq_rtmidi/src/midi_alsa_info.cpp *:

    In api_get_midi_event(), implement support for:

        SND_SEQ_EVENT_PORT_START.
        SND_SEQ_EVENT_PORT_EXIT.
        SND_SEQ_EVENT_PORT_CHANGE (could be difficult).

Seq66qt5/seq66qt5.cpp *:

    Implement gui_palette_qt5::load_inverse_palette().

Seqtool/src/optionsfile.cpp (a low priority):

    parse():  Investigate and fix all the TO DOs.

Seqtool/src/optionsfile.cpp (a low priority):

    Investigate and fix all the TO DOs.

seq_qt5/src/qseqkeys.cpp:

    paintEvent():

seq_qt5/src/qseventslots.cpp:

    delete_current_event(): set modify flag

seq_qt5/src/qlfoframe.cpp:

    on_focus_out_event():  Implement undo of calculations.

seq_qt5/src/qseqbase.cpp:

    set_scroll_y(): Use m_unit_height.

seq_qt5/src/qseqbase.cpp:

    mouseReleaseEvent():  Implement undirtying when undoing.

seq_qt5/src/qsliveframe.cpp:

    new_seq(): handle reenable/disable of the editor for each new sequence.
    cut_seq(): add the warning dialog.
    delete_seq(): add the warning dialog.

seq_qt5/src/qperfroll.cpp:

    Investigate the note at the top about passing values to constructors.
    paintEvent(): handle DRAW_TEMPO

seq_qt5/src/gui_palette_qt5.cpp:

    get_color_inverse(): return black for NONE color.

seq_qt5/src/qseqroll.cpp:

    keyPressEvent():  Fix the zoom keys.

seq_qt5/src/qsmainwnd.cpp:

    Constructor:  Fix and unhide the PPQN combo-box.

seq_qt5/src/qsliveframe.cpp:

    While running, try to avoid drawing the empty slots over and over.

libseq66/src/play/setmapper.cpp:

    Implement select_triggers_in_range().

libseq66/src/play/sequence.cpp:

    Investigate and fix offset_triggers().

libseq66/src/play/performer.cpp:

    Implement solo, FF, rewind, and many more.  Investigate!!!

    Implement error handling in various places.

    put_settings(): Implement the to-do.
    mute_group_control(): Implement it, a HIGH PRIORITY!

libseq66/src/play/screenset.cpp:

    Implement select_triggers_in_range().

libseq66/src/midi/jack_assistant.cpp:

    session_event():  Implement the quit functionality.
    jack_session_callback():  Implement the quit functionality.

libseq66/src/midi/editable_event.cpp:

    set_status_from_string(): Implement the to-do functionality.

libseq66/src/midi/wrkfile.cpp:

    Implement the to-dos.

libseq66/src/midi/midifile.cpp:

    Implement the to-dos.  A HIGH PRIORITY.

libseq66/src/cfg/mutegroupsfile.cpp:

    Implement the to-dos?

libseq66/src/cfg/usrsettings.cpp:

    normalize(): Fix the calculation of the number of mute tracks.

Many modules:

    In general, support run-time changes in PPQN, a big task.
    In general, support PPQN calculations other than "times 4", a big task.

Lots of testing as well!

# vim: sw=4 ts=4 wm=4 et ft=sh
