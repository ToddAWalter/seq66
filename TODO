TO DO for Seq66 0.98.8 (Sequencer64 refactored for C++14 and Qt)
Chris Ahlstrom
2019-04-13 to 2022-05-21

Files:

    -   Is there a GNU function to get all of the canonical installation
        paths?  For Windows?

Pattern Editor, Main Window:

    -   Verify no bugs remaining in:
        -   Pattern fix dialog.
        -   File / Save handling.
    -   "Session: Save" can occur.  Annoying.
    -   Investigate handling of global time-signature. Do we want to save it
        to the user-file (when the user saves the tune with the new settings)?

Windows:

    -   mastermidibase::activate() fails at m_outbus_array.initialize().
        Error initing port 1; it should be disabled?
    -   Disable JACK UI elements in Windows builds (almost done).
    -   The installer build include a *.o file!
    -   Change to creating a 64-bit installer and adjust the instructions.
    -   In the live grid, move the top text up 1 pixel.  Move the bottom text
        up 2 pixels. Maybe reduce the font size by 1. Also consist the for the
        piano rolls.
    -   The default Qt theme pushes the seqtime rightward by about 6 pixels.

Test and Document:

    -   Make sure the Key/Scale note analysis is documented.
    -   Main window:
        -   PPQN
        -   Beats/bar
        -   Beat width (length)
    -   Pattern editor:
        -   Recording velocity
        -   Zoom
        -   Snap
        -   Beats/bar
        -   Beat width (length)
        -   How to handle when we have 4/4 with 4 notes, then change it to
            3/4. The 4th note is not shown, but the event editor shows it is
            still there. After a fix, the note is now deleted.  Proper?
            FEATURE: Should we compress the 4 notes?
            We can use pattern fix for that.
    -   Song editor:
        -   Snap
        -   Add width to Snap button
        -   Consider a way to lay out a pattern from one track
            into another tracks playback, to re-use the pattern on a differnt
            buss and channel. ROADMAP item?

External Live Grid:

    -   Show Recording-style and Quantization buttons in it.

Undo:

    -   Paint a bunch of notes.  Undo then seems to undo one event at a time,
        thereby requiring a large number of Ctrl-Zs.

UI:

    Additional, oft-used configuration items to consider adding to the
    Preferences dialog:

        -   Display:
            -   Global seq feature (global vs pattern background pattern, key,
                and scale).
            -   Tempo / BPM min and max.
        -   Play Options:
            -   New-pattern editor options (check-boxes)
            -   Add song-start-mode radio buttons.
        -   Config Options: (new)
            -   Log-file

    -   Underrun display not consistent with console output with Chameleon
        tune.
    -   Finish up the extended grid-mode functions. Also add pattern and
        event editor instantiation to the grid mode.

Port-Mapping:

    Running qpseq66 on Linux:  "QSynth" is named "PortMidi"! See
    seq_portmidi/src/midibus.cpp.  The workaround is to specify long port
    names in the 'rc' file.

Ports:

    -   Investigate deinit_in() and _out().
    -   Make the port-refresh feature work. It is a toughie!
    -   Editing the control busses in Preferences should be written to the
        specified 'ctrl' file.
    -   Enabling/disabling a port should enable the OK/Apply and restart
        buttons.

MIDI:

    Investigate busarray::set_input() for supporting manual reconnecting.
    Ditto for busarray::get_input() and midibus::api_connect() [rtmidi].

    ALSA:

        When toggling a virtual input port, another port with the same
        number gets created.  Looks like this bug has been around for awhile.
        It also yields an ALSA unsubscribe error when disabling an input.

        Use const char * snd_asoundlib_version () to get the ALSA version.

    JACK:

        Fallback to ALSA if JACK is not running is broken.  Or is it that
        jackdbus is interfering? On another computer, that seems to be the
        case. Seq66 creates virtual ports in that case, but we need to test
        that they are useful, and consider activating the manual-port settings
        in the 'rc' file.

        Also, would it be useful to provide a way to better name each virtual
        port?

        Is Weak JACK worth adding?

Automation:

    Can we leverage continuous controllers (CC) to support modifying synth
    parameters through input automation? See the new "macro" facility.

From Testing:

    When zooming, try to keep the same viewport in view.  Got this working
    for horizontal seqroll and perfroll, but not for vertical (refactoring
    needed).  Try to center vertically on notes in the viewport.

    When muting/unmuting a pattern in the song editor, when focus changes
    the tracks are shown in the bright color.

    Can we distinguish note-insertion from movement snap, to avoid the
    "L"-then-snap-then-move mamba?

    Tempo display needs to be worked on for the perfroll and qloopbuttons.

CLI:

    Get daemonize to load the configuration after forking.

Build:

    -   Try using Clang as the compiler.
    -   Investigate Qt 6 Clazy. (https://invent.kde.org/sdk/clazy)
    -   Independently investigate meson and cmake.

Macros to "finalize":

    SEQ66_USE_MIDI_ALSA_POLL
    SEQ66_USE_SCROLLING_CODE
    SEQ66_SHOW_TEMPO_IN_PIANO_ROLL
    SEQ66_SEQUENCE_EDIT_MODE_GLOBAL
    SEQ66_USE_JACK_SYNC_CALLBACK
    SEQ66_DAEMON_SUPPORT
    SEQ66_SEQUENCE_EDIT_MODE

    USE_SND_SEQ_CONNECT_FROM
    USE_C_MILLISLEEP (related to high CPU in Windows builds)
    USE_SONG_BOX_SELECT
    USE_GROW_SELECTED_NOTE_FUNCTION
    USE_FILL_TIME_SIG_AND_TEMPO (see sequencer64 issue 141)
    USE_WRITE_START_TEMPO and USE_WRITE_TIME_SIG
    USE_UNICODE_SUPPORT
    USE_THESE_SEQSPECS
    USE_SETMAPPER_RESET_SEQUENCES
    USE_SCREENSET_RESET_SEQUENCES
    USE_ACTIVE_SENSE_AND_RESET
    USE_SEQUENCE_REMOVE_EVENTS
    USE_ADJUST_DATA_HANDLE
    USE_INTERSECT_FUNCTIONS
    ENABLE_PROPOSED_FUNCTIONS

    USE_STAZED_SHIFT_SUPPORT
    USE_STAZED_COMPANDING
    USE_THIS_STAZED_CODE_WHEN_READY

    function_calls_gnu.c/h

Others to Consider:

    In main frame, try to highlight the start/stop/pause buttons
    appropriately.

    On a Debian Sid box, ALSA puts out *two* events into Qsynth for every note
    event. On an Ubuntu box, just one event is emitted. Why?  Try it under JACK
    at some point on Debian Sid (it also puts out two events).  Two events are
    emitted even when just clicking on the virtual piano keyboard in the
    pattern editor!  This occurs during the buss flush after the event is
    sent.  Does not seem to be due to the MIDI thru ALSA port.

EXTANT ISSUES:

#1  JACK Metadata MIDINAM support.  LV2 MIDNAM has been around for a
    while. There has been discussion on #lad, and, now JACK 2 has metadata
    implemented, Carla has started offering that MIDNAM information as
    metadata on the midi-in port for a connecting sequencer to use.
    STATUS: Not yet started.  Much study needed. A low priority.

#3  Open loop Pattern Editor window.
    On mouse wheel scroll event we expect the piano-roll and notes sheet to
    scroll vertically.
    STATUS: We had to disable mouse-wheel scrolling for this reason: In
    qseqkeys, we did not want the scroll wheel to accidentally scroll the
    piano keys vertically.  Same for qscrollmaster, qseqeditframe64, except
    that we note wheelEvent() is not called for some reason.  One way around
    this issue might be to some pass child scrolling up to the qscrollmaster
    class.

#16 Ableton Live transport support?
    Go to this issue in Github to see the thread.

#18 Mute Group does not toggle
    Also I have noticed that when I activate a mute group I am not able to
    activate patterns that do not belong to the activated mute group. It is
    normal?
    STATUS: I want to double-check this one.  This may now be fixed via
    fixes for issue #49.

#24 Release notes in release tag message?
    I would like to add seq66 to https://libreav.org/updates
    Could I request that the release change notes are used in the release
    message? Then they could be syndicated via the releases.atom.
    Either using the release description box in the Create Release feature on
    GitHub (which can accept markdown) or with something like git tag -a v0.4
    -m "$(cat RELNOTES.md)" (which GH does not detect markdown from).
    Might it be possible to edit
    (https://github.com/ahlstromcj/seq66/releases) to pop the release notes
    in?  It's just that it's time sensitive as GitHub has [malformed
    releases.atom feeds] (https://github.com/isaacs/github/issues/1892) that
    only have an updated  date not a published date, so any change to the
    release details will change the date in the feed that is used by
    libreav.org.
    STATUS: Not sure this is worth doing. Do not know about "atom".

#29 Play patterns from different sets at the same time
    STATUS: Provisional support in 0.91.3.  See Edit / Preferences / Play /
    Sets Mode.

#37 Song editor scrolling?
    STATUS: To be investigated.

#40 NSM: seq66 in a new session should provide a blank project
    Currently it imports the previously used MIDI file.
    STATUS: If an existing HOME configuration exists, it is copied to the new
    session directory.  This is by design.  If you want a new configuration,
    then move or hide the HOME configuration.

#44 "Record live sequence changes" functionality
    Currently the "record live sequence changes" only adds patterns into the
    song timeline as whole loops, starting at the last pattern loop and ending
    at the next, and ignoring queueing completely (queueing a pattern just
    adds it to the song immediately). It seems to me that a live-oriented
    sequencer like Seq66 should have the ability to record a live performance
    as accurately as possible, so that a user can simply hit the record enable
    and do their live performance, knowing that can then go back and replay it
    exactly (if they want to do a recording session for example, or perform
    the same track while focussing entirely on knob tweaking etc.) The song
    timeline already supports arbitrary start/end points for pattern "chunks",
    so it seems like this should already be possible. Thoughts?
    STATUS: to examine.

#46 JACK port groups / order?
    STATUS: to examine.

#48 JACK-midi self connections
    With NSM and [manual ports] enabled, inputs ports are not created when I
    load the session.  Steps to reproduce :

      * Create a NSM session with a jack-patch.
      * Add qseq66
      * Save and quit the session
      * Change .rc file in the session folder to enable [manual-ports], then
        save the file.
      * Open your NSM session, use MIDI-input preference to create ports,
        then make connections.
      * Save and reload the session.

    Also, [manual-ports] is off, then seq66 handles connections. IMO, this
    behavior should be disabled with NSM, because a session manager is
    supposed to store/restore the connections.

    (I have used Ray-Session , but I guess it acts as others NSM managers)

    Note:  Probably need an option to not auto-connect while NSM is running.
    However, this can be set in the 'rc' file.

#49 Unable to unmute loops after group learn.
    STATUS: Done.  Needs more testing.

#53 MIDI CC sequencing
    STATUS: See the thread on GitHub.

#66 Toggle MIDI Recording via CC message
    
    I think modes generally should be triggerable individually. Especially if
    there   will be more to come in the future, it will get messy when you
    only have a single button for them.  I think that a next candidate would
    be for copy and clear mode.  In copy mode, the first grid button press
    would highlight a pattern and the second one would paste it to the
    appropriate slot.  On clear mode, the patterns could be emptied or removed
    via the grid buttons on   the controller.

    We could end up with a lot of modes, perhaps more than keystrokes could
    support.  If a MIDI controller can emit specific D2 data programmably from
    0 to 127 (for Notes, D1 is the note number and D2 is the velocity; for
    Controllers, D1 is the CC number and D2 is the value), then we could
    consolidate modes in one command (and preserve the stepping through the
    modes as an alternative for less flexible controllers).

    Ideally there would be an automation control for cycling through the modes
    and one for each mode separately.  Then people could chose if they want to
    set up a control that cycles through the options or set up a control that
    instantly activates a specific mode.

#68 MIDI controller initialization step
    The Launchpad Pro MK3 needs to be put in a special programmer mode before
    it can  work nicely with Seq66.  This is done by sending a SysEx message
    that is documented in the programmers manual.  There could be other
    controllers with similar needs as well.  It would be nice if there would
    be a way to send a list of MIDI messages to the   controller on the
    application startup and a separate list on shutdown.

    Actually I have been thinking about the mode transition logic and it would
    be nice to have support for temporary transition.
    Here is my original suggested flow

    1. Controller button pressed
    2. MIDI CC message with `on value` sent
    3. Seq66 reacts to the message and changes modes
    4. Controller button released
    5. MIDI CC message with `off value` sent
    6. Seq66 does nothing
    7. ...
    8. Same controller button pressed
    9. MIDI CC message with `on value` sent
    10. Seq66 reacts to the message and changes to neutral mode
    11. Controller button released
    12. MIDI CC message with `off value` sent
    13. Seq66 does nothing

    A temporary transition would be engaged by holding a button down on the
    MIDI controller and then releasing it later.  While the button is held
    down, Seq66 switches to the configured mode, the grid buttons can then be
    used to engage with the mode. When the button is released,Seq66 switches
    back to the previous mode and not to the neutral one.  This could be
    implemented via a timer that starts when a CC from a button press is
    released. If the button is released under a threshold amount of time then
    the mode is toggled permamently. If no `button released` CC message is
    received within a threshold amount of time then the transition becomes
    temporary and when the `button released` CC message is finally received
    then Seq66 switches back to the previous mode.

    The idea is that with a MIDI controller you could assign different
    functions to a single button.  It would also fit nicely with a Launchpad
    where apart from the grid buttons, there are "mode" buttons on the side.

PATTERNS:

    -   Set pattern editor focus to grid at start unless it is a new one.
    -   Make it center on notes if not visible.
    -   Consider adding start/stop buttons to external windows (song & pattern).

Tons of TO DOs in performer!

    Load a song with Song triggers; go to the song tab; select File/New. Note
    that the perfroll clears, but not the perfnames!  We need to derive all
    qperf GUIs from qperfbase.  Actually, they both clear, only if clicked on.

    Implement solo, FF, rewind, and many more.  Investigate!!!

# vim: sw=4 ts=4 wm=4 et ft=sh
